definitions:
  dto.AdvertisementCreateRequest:
    properties:
      content:
        maxLength: 5000
        minLength: 1
        type: string
      image_url:
        type: string
      price:
        type: number
      title:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - content
    - image_url
    - price
    - title
    type: object
  dto.AdvertisementResponse:
    properties:
      author_login:
        type: string
      content:
        type: string
      created_at:
        type: string
      image_url:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  dto.AdvertisementResponseWithOwnership:
    properties:
      author_login:
        type: string
      content:
        type: string
      created_at:
        type: string
      image_url:
        type: string
      is_mine:
        type: boolean
      price:
        type: number
      title:
        type: string
    type: object
  dto.LoginUserRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      login:
        maxLength: 32
        minLength: 3
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - login
    - password
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      login:
        type: string
    type: object
  v1.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/advertisements:
    get:
      description: Get list of advertisements with optional filters by price and category
      parameters:
      - in: query
        name: max_price
        type: number
      - in: query
        name: min_price
        type: number
      - in: query
        minimum: 1
        name: page_number
        required: true
        type: integer
      - in: query
        maximum: 100
        minimum: 1
        name: page_size
        required: true
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - enum:
        - price
        - created_at
        in: query
        name: sort_type
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AdvertisementResponseWithOwnership'
            type: array
        "400":
          description: Invalid query parameters or negative price
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get advertisements
      tags:
      - advertisements
    post:
      consumes:
      - application/json
      description: Create an advertisement with title, content, image URL and price
      parameters:
      - description: Advertisement data
        in: body
        name: advertisement
        required: true
        schema:
          $ref: '#/definitions/dto.AdvertisementCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdvertisementResponse'
        "400":
          description: Invalid request body or negative price
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new advertisement
      tags:
      - advertisements
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return an access token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "401":
          description: Invalid credentials or user not found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/auth/me:
    get:
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with a strong password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body or password too weak or user already exists
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
